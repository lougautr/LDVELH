package principal;

import boutons.*;
import noeud.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.awt.Toolkit;
import java.util.Map;
import java.util.HashMap;
import java.io.*;
import org.json.simple.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class Fenetre extends JFrame{
	//Creation zone texte de l'intro
	protected JTextArea testField1;
	//Creation des sections
	protected JSONObject sections;
	//Creation des pannels
	protected JPanel pannelBoutonDebut;
	protected JPanel pannelMenu;
	//Creation du panel texte, bouton et principal
	protected JPanel pannelPrincipal;
	protected JPanel pannelTexte;

	//Creation des boutons
	protected String texteIntroduction;

	protected HashMap <String, HashMap<String, String>> dicoSections;

	protected DefaultListModel<String> modelSections;

	protected HashMap<Integer, String> dicoTexteSections;

	public Fenetre(){
		//Nom de la fenêtre : "ldvelh-lap"
		this.setTitle("ldvelh-lap");
		//Initialisation du panel principal
		pannelPrincipal = new JPanel();
		pannelPrincipal.setLayout(new BorderLayout(20,0));
		//Initialisation du panel texte
		pannelTexte = new JPanel();
		//Initialisation du panel menu
		pannelMenu = new JPanel();
		//Initialisation de la zone de texte de l'intro
		testField1 = new JTextArea();
		//Initialisation du panel des boutons
		pannelBoutonDebut = new JPanel();
		this.setSize(Toolkit.getDefaultToolkit().getScreenSize().width, Toolkit.getDefaultToolkit().getScreenSize().height);
	}

	public void afficherFenetre1(){
		dicoTexteSections = new HashMap<>();
		dicoSections = new HashMap<String, HashMap<String, String>>();

		pannelPrincipal.setLayout(new BorderLayout(20,0));

		JPanel pannelPremiersBouton = new JPanel();
		JPanel pannelListHist = new JPanel();

		pannelPrincipal.add("North",pannelPremiersBouton);

		//AJOUT DE LA FONCTION QUI AFFICHE LA LISTE DES BOUTONS ET SUPPRESSION DU CLICKCOUNT = 2
		File dir = new File("./files/");
		File[] listeFichiers = dir.listFiles();

		DefaultListModel<String> modellisteHistoires = new DefaultListModel<>();
		for(File item : listeFichiers){
			modellisteHistoires.addElement(String.format(item.getName()));
		}
		JList<String> listeHistoires = new JList<String>(modellisteHistoires);
		listeHistoires.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		listeHistoires.setFont(new Font("Serif", Font.PLAIN, 15));

		pannelListHist.setLayout(new BoxLayout(pannelListHist, BoxLayout.PAGE_AXIS));
		pannelListHist.add(listeHistoires);
		pannelListHist.setVisible(false);

		pannelPrincipal.add("Center",pannelListHist);

		CreerModifierHistoire boutonCreerHistoire = new CreerModifierHistoire(modellisteHistoires, pannelListHist, pannelPrincipal, pannelPremiersBouton, sections, listeHistoires, this, testField1);
		ChargerHistoire boutonChargerHistoire = new ChargerHistoire(pannelListHist, pannelPrincipal, pannelPremiersBouton, listeHistoires, testField1, this);
		pannelPremiersBouton.add(boutonCreerHistoire);
		pannelPremiersBouton.add(boutonChargerHistoire);
		pannelPrincipal.repaint();

		this.getContentPane().add(pannelPrincipal);
		this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setVisible(true);
	}

	/*public void afficherIntro(String intro){
		texteIntroduction = intro;
		System.out.println("il y a : " + pannelPrincipal.getComponentCount());
		if(pannelPrincipal.getComponentCount() == 2){
			testField1.setText(intro);
			testField1.setFont(new Font("Serif", Font.PLAIN, 13));
			//testField1.setEditable(false);

			pannelTexte.setLayout(new BoxLayout(pannelTexte, BoxLayout.PAGE_AXIS));
			pannelTexte.add(testField1);
		 	Commencer commencer = new Commencer(pannelBoutonDebut, sections, this);
			pannelBoutonDebut.add(commencer);

			modelSections = new DefaultListModel<>();
			for(int i = 1; i <= sections.size(); i++){
				modelSections.addElement("Sections " + i);
				HashMap<String,String> a = new HashMap<>();
				dicoSections.put("Sections " + i, a);
				String b = "";
				dicoTexteSections.put(i, b);
			}
			JList<String> listSections = new JList<String>(modelSections);
			listSections.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			listSections.addMouseListener(new MouseAdapter(){
		         public void mouseClicked(MouseEvent e) {
		            if (e.getClickCount() == 2) {
									 int index = listSections.getSelectedIndex() + 1;
									 Noeud noeud1 = new Noeud(sections,Integer.toString(index));
		               afficherParagraphe(noeud1);
		            }
		         }
					});
			JScrollPane scrollPane = new JScrollPane();
			scrollPane.setPreferredSize(new Dimension(250, (int)Math.round(Toolkit.getDefaultToolkit().getScreenSize().height*0.85)));
			scrollPane.setViewportView(listSections);
			listSections.setFont(new Font("Serif", Font.PLAIN, 15));

			pannelMenu.add(scrollPane);
			pannelPrincipal.add("West",pannelMenu);
			pannelPrincipal.add("Center",pannelTexte);
			pannelPrincipal.add("South",pannelBoutonDebut);
		}else{
			pannelBoutonDebut.remove(pannelBoutonDebut.getComponent(0));
			pannelBoutonDebut.remove(pannelBoutonDebut.getComponent(0));
			pannelBoutonDebut.remove(pannelBoutonDebut.getComponent(0));
			Commencer commencer = new Commencer(pannelBoutonDebut, sections, this);
			pannelBoutonDebut.add(commencer);
			//Action du bouton "Commencer l'histoire"
			//Le clique du bouton affiche la première section et le bouton disparait
			pannelMenu.setVisible(true);
			pannelTexte.setVisible(true);
			pannelBoutonDebut.setVisible(true);
			testField1.setText(intro);
			testField1.setFont(new Font("Serif", Font.PLAIN, 13));
		}
		pannelMenu.setVisible(true);
		pannelTexte.setVisible(true);
		pannelBoutonDebut.setVisible(true);
	}

	public void afficherParagraphe(Noeud unNoeud){
		pannelBoutonDebut.removeAll();
		HashMap<String,String> mapNoeud;
		if(dicoSections.get("Sections " + unNoeud.getNumber()).isEmpty()){
			mapNoeud = new HashMap<>(unNoeud.choices());
		}else{
			mapNoeud = new HashMap<>(dicoSections.get("Sections " + unNoeud.getNumber()));
		}
		String phrase;
		if(dicoTexteSections.get(Integer.valueOf(unNoeud.getNumber())).equals("")){
			phrase = unNoeud.getTexte();
			dicoTexteSections.put(Integer.valueOf(unNoeud.getNumber()), phrase);
		}else{
			phrase = dicoTexteSections.get(Integer.valueOf(unNoeud.getNumber()));
		}

		testField1.setText(phrase);
		//testField1.setFont(new Font("Serif", Font.PLAIN, 20));
		List<String> myList2 = new ArrayList<>();
		//HashMap<String,String> mapNoeud = new HashMap<>(unNoeud.choices());

		System.out.println(mapNoeud);
		DefaultListModel<String> model = new DefaultListModel<>();
		if(dicoSections.get("Sections " + unNoeud.getNumber()).isEmpty()){
			for(String str : mapNoeud.keySet()){
				model.addElement(mapNoeud.get(str));
			}
			dicoSections.put("Sections " + unNoeud.getNumber(), mapNoeud);
		}else{
			for(String str : dicoSections.get("Sections " + unNoeud.getNumber()).keySet()){
				model.addElement(dicoSections.get("Sections " + unNoeud.getNumber()).get(str));
			}
		}
		//JList<String> listSections2 = new JList<String>(myList2.toArray(new String[myList2.size()]));
		JList<String> listSections2 = new JList<String>(model);
		listSections2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		listSections2.addMouseListener(new MouseAdapter(){
					 public void mouseClicked(MouseEvent e) {
							if (e.getClickCount() == 2) {
								 String selected = listSections2.getSelectedValue();
								 for(Map.Entry map: mapNoeud.entrySet()){
						 			if(map.getValue().equals(selected)){
										String index = map.getKey().toString();
										Noeud noeud1 = new Noeud(sections,index);
										afficherParagraphe(noeud1);
									}
						 		}
							}
					 }
				});
		JScrollPane scrollPane2 = new JScrollPane();
		scrollPane2.setViewportView(listSections2);
		listSections2.setFont(new Font("Serif", Font.PLAIN, 15));
		System.out.println(pannelTexte.getComponentCount());
		if(pannelTexte.getComponentCount() == 2){
			pannelTexte.remove(pannelTexte.getComponent(1));
			pannelTexte.add(scrollPane2);
		}else{
			pannelTexte.add(scrollPane2);
		}
		Plus plus = new Plus(modelSections, dicoSections, dicoTexteSections, this, unNoeud, mapNoeud, model, sections);
		Moins moins = new Moins(model, mapNoeud, dicoSections, unNoeud, listSections2);
		Sauvegarder sauvegarder = new Sauvegarder(sections, dicoTexteSections, dicoSections, mapNoeud, this, texteIntroduction);
		Accueil accueil = new Accueil(pannelPrincipal, pannelMenu, pannelBoutonDebut, pannelTexte, this);
		ModificationTexte modificationTexte = new ModificationTexte(testField1, unNoeud, this);
		pannelBoutonDebut.add(accueil);
		pannelBoutonDebut.add(plus);
		pannelBoutonDebut.add(moins);
		pannelBoutonDebut.add(modificationTexte);
		pannelBoutonDebut.add(sauvegarder);
		pannelBoutonDebut.repaint();
  }*/

	public void majDicoTexteSections(JTextArea texte, Integer numNoeud){
		dicoTexteSections.put(numNoeud, texte.getText());
	}

	public void setIntro(String intro){texteIntroduction = intro;}

	public void setSections(JSONObject sec){sections = sec;}

	public HashMap<String, HashMap<String, String>> getDicoSections(){return dicoSections;}

	public HashMap<Integer, String> getDicoTexteSections(){return dicoTexteSections;}

	public JTextArea getTestField1(){return testField1;}

	public JPanel getPanelTexte(){return pannelTexte;}

	public JPanel getPanelBoutonDebut(){return pannelBoutonDebut;}

	public  JPanel getPanelMenu(){return pannelMenu;}

	public DefaultListModel<String> getModelSections(){return modelSections;}
}
